roc_curve(truth = Class, .pred_good, event_level="second") %>%
autoplot()
preds <- glm_add_res_bf %>% collect_predictions(summarize = FALSE)
preds
glm_add_res_ef %>% collect_predictions(summarize = FALSE) %>%
roc_curve(Class, .pred_good, event_level="second") %>%
autoplot()
library(tidyverse)
library(caret)
library(tidymodels)
df <- readr::read_csv("cs_1675_fall2021_finalproject.csv", col_names = TRUE)
dft <- df %>% mutate(output=boot::logit(output))
bfm_df <- dft
bf_df <- bfm_df %>% select(-m)
efm_df <- dft %>% mutate(x5 = 1.0 - (x1+x2+x3+x4), w=x2/(x3+x4), z=(x1+x2)/(x4+x5), t=v1*v2)
ef_df <- efm_df %>% select(-m)
ef_df %>% glimpse()
classes <- (df$output < 0.33)
cdf <- df %>% mutate(Class=ifelse(classes, "good", "bad"))
cdf <- cdf %>% mutate(event=ifelse(classes, 1, 0))
cdf %>% glimpse()
cbfm_df <- bfm_df %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
cbf_df <- bf_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
cefm_df <- efm_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
cef_df <- ef_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
set.seed(2021)
cv_folds_bf <- vfold_cv(cbf_df, v = 5, repeats = 3, strata = Class)
cv_folds_bf
my_metrics <- metric_set(accuracy, roc_auc, mn_log_loss)
cv_folds_ef <- vfold_cv(cef_df, v = 5, repeats = 3, strata = Class)
cv_folds_ef
glm_spec_ef <- logistic_reg() %>% set_engine("glm")
bp_stan_ef <- recipe(Class ~ ., data = cef_df) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
glm_add_wflow_ef <- workflow() %>%
add_model(glm_spec_ef) %>%
add_recipe(bp_stan_ef)
glm_add_res_ef <- glm_add_wflow_ef %>%
fit_resamples(cv_folds_ef,
metrics = my_metrics,
control = control_resamples(save_pred = TRUE))
glm_add_res_ef$.notes[[1]]
glm_add_res_ef %>% collect_metrics()
glm_add_res_ef %>% collect_predictions() %>%
conf_mat(truth = Class, estimate = .pred_class)
glm_add_res_ef %>% collect_predictions(summarize = FALSE) %>%
group_nest(id, id2) %>%
mutate(conf_mats = map(data,
~ yardstick::conf_mat(.x, truth = Class, estimate = .pred_class))) %>%
pluck("conf_mats") %>%
map_dfr( ~ as.data.frame(.x$table)) %>%
group_by(Prediction, Truth) %>%
summarise(Freq = mean(Freq, na.rm = TRUE),
.groups = 'drop') %>%
mutate(Prediction = forcats::fct_rev(Prediction)) %>%
ggplot(mapping = aes(x = Truth, y = Prediction)) +
geom_tile(mapping = aes(fill = Freq),
color = 'black') +
geom_text(mapping = aes(label = round(Freq,2)),
color = 'white', size = 7.5) +
theme_bw() +
theme(legend.position = 'none')
glm_add_res_ef %>% collect_predictions(summarize = FALSE) %>%
roc_curve(Class, .pred_good, event_level="second") %>%
autoplot()
library(ROCR)
plot_ROC <- function(model, df)
{
model_prob <- predict(model, df, type = "prob")$good
model_perf <- prediction(model_prob, cefm_df$Class) %>%
performance(measure = "tpr", x.measure = "fpr")
# Plot ROC curve
plot(model_perf, col = "black")
abline(a=0, b= 1, lty = 2)
model_perf
}
plot_ROC(p4_m11, cefm_df)
modelRes <- plot_ROC(p4_m11, cefm_df)
library(ROCR)
plot_ROC <- function(model, df)
{
model_prob <- predict(model, df, type = "prob")$good
preds <- prediction(model_prob, cefm_df$Class)
print(preds)
model_perf <- preds %>% performance(measure = "tpr", x.measure = "fpr")
# Plot ROC curve
plot(model_perf, col = "black")
abline(a=0, b= 1, lty = 2)
model_perf
}
modelRes <- plot_ROC(p4_m11, cefm_df)
library(ROCR)
plot_ROC <- function(model, df)
{
model_prob <- predict(model, df, type = "prob")$good
preds <- prediction(model_prob, df$Class)
print(preds)
model_perf <- preds %>% performance(measure = "tpr", x.measure = "fpr")
# Plot ROC curve
plot(model_perf, col = "black")
abline(a=0, b= 1, lty = 2)
model_perf
}
#modelRes <- plot_ROC(p4_m11, cefm_df)
#modelRes
model_prob <- predict(p4_m11, cefm_df, type = "prob")$good
preds <- prediction(model_prob, cefm_df$Class)
#modelRes <- plot_ROC(p4_m11, cefm_df)
#modelRes
model_prob <- predict(p4_m11, cefm_df, type = "prob")$good
model_prob
preds <- prediction(model_prob, cefm_df$Class)
#modelRes <- plot_ROC(p4_m11, cefm_df)
library(tidyverse)
library(caret)
library(tidymodels)
df <- readr::read_csv("cs_1675_fall2021_finalproject.csv", col_names = TRUE)
dft <- df %>% mutate(output=boot::logit(output))
bfm_df <- dft
bf_df <- bfm_df %>% select(-m)
efm_df <- dft %>% mutate(x5 = 1.0 - (x1+x2+x3+x4), w=x2/(x3+x4), z=(x1+x2)/(x4+x5), t=v1*v2)
ef_df <- efm_df %>% select(-m)
ef_df %>% glimpse()
classes <- (df$output < 0.33)
cdf <- df %>% mutate(Class=ifelse(classes, "good", "bad"))
cdf <- cdf %>% mutate(event=ifelse(classes, 1, 0))
cdf %>% glimpse()
cbfm_df <- bfm_df %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
cbf_df <- bf_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
cefm_df <- efm_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
cef_df <- ef_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output)
set.seed(2021)
cv_folds_bf <- vfold_cv(cbf_df, v = 5, repeats = 3, strata = Class)
cv_folds_bf
my_metrics <- metric_set(accuracy, roc_auc, mn_log_loss)
set.seed(2021)
my_ctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
my_metric <- "Accuracy"
svmRadial_p4_m11 <- train(Class ~ .,
data = cefm_df,
method = "svmRadial",
metric = my_metric,
preProcess = c("center", "scale"),
trControl = my_ctrl)
svmRadial_p4_m11 %>% summary()
library(ROCR)
plot_ROC <- function(model, df)
{
model_prob <- predict(model, df, type = "prob")$good
print (model_prob)
preds <- prediction(model_prob, df$Class)
print(preds)
model_perf <- preds %>% performance(measure = "tpr", x.measure = "fpr")
# Plot ROC curve
plot(model_perf, col = "black")
abline(a=0, b= 1, lty = 2)
}
modelRes <- plot_ROC(p4_m11, cefm_df)
modelRes <- plot_ROC(svmRadial_p4_m11, cefm_df)
#modelRes <- plot_ROC(svmRadial_p4_m11, cefm_df)
plot(svmRadial_p4_m11, add = TRUE, col = "red", print.auc=TRUE, print.auc.x = 0.5, print.auc.y = 0.3)
legend(0.3, 0.2, legend = c("test-svm"), lty = c(1), col = c("blue"))
#modelRes <- plot_ROC(svmRadial_p4_m11, cefm_df)
# ROC using plotROC (ggplot2 extension)
gc_prob <- predict(svmRadial_p4_m11, newdata = cefm_df %>% select(-Class), type = "prob")
gc_pROC <- roc(response = gc$Class, predictor = gc_prob[, "good"])
#modelRes <- plot_ROC(svmRadial_p4_m11, cefm_df)
# ROC using plotROC (ggplot2 extension)
#gc_prob <- predict(svmRadial_p4_m11, newdata = cefm_df %>% select(-Class), type = "prob")
#gc_pROC <- roc(response = gc$Class, predictor = gc_prob[, "good"])
#plot(gc_pROC)
#gc_pROC$auc
gc_prob_ex <- extractProb(list(svmRadial_p4_m11), cefm_df %>% select(-Class))
#modelRes <- plot_ROC(svmRadial_p4_m11, cefm_df)
# ROC using plotROC (ggplot2 extension)
#gc_prob <- predict(svmRadial_p4_m11, newdata = cefm_df %>% select(-Class), type = "prob")
#gc_pROC <- roc(response = gc$Class, predictor = gc_prob[, "good"])
#plot(gc_pROC)
#gc_pROC$auc
list(svmRadial_p4_m11)
gc_prob_ex <- extractProb(list(svmRadial_p4_m11), cefm_df %>% select(-Class))
#modelRes <- plot_ROC(svmRadial_p4_m11, cefm_df)
# ROC using plotROC (ggplot2 extension)
#gc_prob <- predict(svmRadial_p4_m11, newdata = cefm_df %>% select(-Class), type = "prob")
#gc_pROC <- roc(response = gc$Class, predictor = gc_prob[, "good"])
#plot(gc_pROC)
#gc_pROC$auc
list(svmRadial_p4_m11)
gc_prob_ex <- extractProb(list(svmRadial_p4_m11), cefm_df %>% select(-Class))
#modelRes <- plot_ROC(svmRadial_p4_m11, cefm_df)
# ROC using plotROC (ggplot2 extension)
#gc_prob <- predict(svmRadial_p4_m11, newdata = cefm_df %>% select(-Class), type = "prob")
#gc_pROC <- roc(response = gc$Class, predictor = gc_prob[, "good"])
#plot(gc_pROC)
#gc_pROC$auc
list(svmRadial_p4_m11)
#gc_prob_ex <- extractProb(list(svmRadial_p4_m11), cefm_df %>% select(-Class))
#gc_ggROC <- ggplot(gc_prob_ex, aes(d=obs, m=Good)) + geom_roc()
#gc_ggROC_styled <- gc_ggROC +  annotate("text", x = .75, y = .25,
#       label = paste("AUC =", round(calc_auc(gc_ggROC)$AUC, 2)))
#gc_ggROC_styled
library(tidyverse)
library(tidymodels)
library(mltools)
library(caret)
df <- readr::read_csv("cs_1675_fall2021_finalproject.csv", col_names = TRUE)
dft <- df %>% mutate(logit_response = boot::logit (output)) %>% select (-output)
bfm_df <- dft
bf_df <- dft %>% select (-m)
efm_df <- dft %>% mutate (x5=(1-x1+x2+x3+x4), t=v1+v2, w=(x2/(x3+x4)), z=(x1+x2)/(x4+x5))
efm_df %>% glimpse()
ef_df <- efm_df %>% tibble::as_tibble () %>% select (-m)
my_ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
my_metric <- 'R-squared'
mod1 <- readr::read_rds("linear_mod1_saved.rds")
library(tidyverse)
library(tidymodels)
library(mltools)
library(caret)
df <- readr::read_csv("cs_1675_fall2021_finalproject.csv", col_names = TRUE)
df %>% glimpse()
dft <- df %>% mutate(logit_response = boot::logit (output)) %>% select (-output)
bfm_df <- dft
bf_df <- dft %>% select (-m)
efm_df <- dft %>% mutate (x5=(1-x1+x2+x3+x4), t=v1+v2, w=(x2/(x3+x4)), z=(x1+x2)/(x4+x5))
efm_df %>% glimpse()
ef_df <- efm_df %>% tibble::as_tibble () %>% select (-m)
my_ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
my_metric <- 'R-squared'
set.seed (8131999)
### All additive features excluding derived features, but including categorical inputs.
mod1 <- train(logit_response ~ .,
data = bf_df,
method = "lm",
metric = my_metric,
trControl = my_ctrl)
#mod1 %>% dotplot (metric = "RMSE")
#mod1 %>% dotplot (metric = "R-squared")
#mod1 %>% dotplot (metric = "MAE")
mod1 %>% coefplot::coefplot () + theme_bw() + theme(legend.position='none')
mod1 %>% readr::write_rds("linear_mod1_saved.rds")
re_load_mod1 <- readr::read_rds("linear_mod1_saved.rds")
re_load_mod1 %>% summary()
all.equal( mod1, re_load_mod1)
mod1 <- readr::read_rds("linear_mod1_saved.rds")
mod2 <- readr::read_rds("linear_mod2_saved.rds")
mod3 <- readr::read_rds("linear_mod3_saved.rds")
mod4 <- readr::read_rds("linear_mod4_saved.rds")
mod5 <- readr::read_rds("linear_mod5_saved.rds")
mod6 <- readr::read_rds("linear_mod6_saved.rds")
mod7 <- readr::read_rds("linear_mod7_saved.rds")
mod8 <- readr::read_rds("linear_mod8_saved.rds")
mod9 <- readr::read_rds("linear_mod9_saved.rds")
all_models <- as.list(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8, mod9)
as.character(0:8)
as.character(1:9)
extract_metrics <- function(my_mod, mod_name)
{
broom::glance(my_mod) %>%
mutate(model_name = mod_name)
}
all_model_metrics <- purrr::map2_dfr(all_models,
as.character(1:9),
extract_metrics)
length(all_models)
all_models
mod1 <- readr::read_rds("linear_mod1_saved.rds")
mod2 <- readr::read_rds("linear_mod2_saved.rds")
mod3 <- readr::read_rds("linear_mod3_saved.rds")
mod4 <- readr::read_rds("linear_mod4_saved.rds")
mod5 <- readr::read_rds("linear_mod5_saved.rds")
mod6 <- readr::read_rds("linear_mod6_saved.rds")
mod7 <- readr::read_rds("linear_mod7_saved.rds")
mod8 <- readr::read_rds("linear_mod8_saved.rds")
mod9 <- readr::read_rds("linear_mod9_saved.rds")
all_models <- as.list(c(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8, mod9))
all_models
mod1 <- readr::read_rds("linear_mod1_saved.rds")
mod2 <- readr::read_rds("linear_mod2_saved.rds")
mod3 <- readr::read_rds("linear_mod3_saved.rds")
mod4 <- readr::read_rds("linear_mod4_saved.rds")
mod5 <- readr::read_rds("linear_mod5_saved.rds")
mod6 <- readr::read_rds("linear_mod6_saved.rds")
mod7 <- readr::read_rds("linear_mod7_saved.rds")
mod8 <- readr::read_rds("linear_mod8_saved.rds")
mod9 <- readr::read_rds("linear_mod9_saved.rds")
all_models <- as.list(c(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8, mod9))
length(all_models)
mod1 <- readr::read_rds("linear_mod1_saved.rds")
mod2 <- readr::read_rds("linear_mod2_saved.rds")
mod3 <- readr::read_rds("linear_mod3_saved.rds")
mod4 <- readr::read_rds("linear_mod4_saved.rds")
mod5 <- readr::read_rds("linear_mod5_saved.rds")
mod6 <- readr::read_rds("linear_mod6_saved.rds")
mod7 <- readr::read_rds("linear_mod7_saved.rds")
mod8 <- readr::read_rds("linear_mod8_saved.rds")
mod9 <- readr::read_rds("linear_mod9_saved.rds")
#all_models <- as.list(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8, mod9)
all_models <- purrr::map(1:9, c(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8, mod9))
mod1 <- readr::read_rds("linear_mod1_saved.rds")
mod2 <- readr::read_rds("linear_mod2_saved.rds")
mod3 <- readr::read_rds("linear_mod3_saved.rds")
mod4 <- readr::read_rds("linear_mod4_saved.rds")
mod5 <- readr::read_rds("linear_mod5_saved.rds")
mod6 <- readr::read_rds("linear_mod6_saved.rds")
mod7 <- readr::read_rds("linear_mod7_saved.rds")
mod8 <- readr::read_rds("linear_mod8_saved.rds")
mod9 <- readr::read_rds("linear_mod9_saved.rds")
#all_models <- as.list(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8, mod9)
all_models <- purrr::map(1:9, fit_lm_poly, train_set = my_train)
mod1 <- readr::read_rds("linear_mod1_saved.rds")
mod2 <- readr::read_rds("linear_mod2_saved.rds")
mod3 <- readr::read_rds("linear_mod3_saved.rds")
mod4 <- readr::read_rds("linear_mod4_saved.rds")
mod5 <- readr::read_rds("linear_mod5_saved.rds")
mod6 <- readr::read_rds("linear_mod6_saved.rds")
mod7 <- readr::read_rds("linear_mod7_saved.rds")
mod8 <- readr::read_rds("linear_mod8_saved.rds")
mod9 <- readr::read_rds("linear_mod9_saved.rds")
all_models <- as.list(mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8, mod9)
all_cv_results <- re_load_mod6_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod6 bayesian") %>%
bind_rows(re_load_mod9_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod9 bayesian"))
library(tidyverse)
library(tidymodels)
library(mltools)
library(caret)
df <- readr::read_csv("cs_1675_fall2021_finalproject.csv", col_names = TRUE)
dft <- df %>% mutate(logit_response = boot::logit (output)) %>% select (-output)
bfm_df <- dft
bf_df <- dft %>% select (-m)
efm_df <- dft %>% mutate (x5=(1-x1+x2+x3+x4), t=v1+v2, w=(x2/(x3+x4)), z=(x1+x2)/(x4+x5))
efm_df %>% glimpse()
ef_df <- efm_df %>% tibble::as_tibble () %>% select (-m)
my_ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
my_metric <- 'R-squared'
mod1 <- readr::read_rds("linear_mod1_saved.rds")
mod2 <- readr::read_rds("linear_mod2_saved.rds")
mod3 <- readr::read_rds("linear_mod3_saved.rds")
mod4 <- readr::read_rds("linear_mod4_saved.rds")
mod5 <- readr::read_rds("linear_mod5_saved.rds")
mod6 <- readr::read_rds("linear_mod6_saved.rds")
mod7 <- readr::read_rds("linear_mod7_saved.rds")
mod8 <- readr::read_rds("linear_mod8_saved.rds")
mod9 <- readr::read_rds("linear_mod9_saved.rds")
mod1$results %>% glimpse()
mod2$results %>% glimpse()
mod3$results %>% glimpse()
mod4$results %>% glimpse()
mod5$results %>% glimpse()
mod6$results %>% glimpse()
mod7$results %>% glimpse()
mod8$results %>% glimpse()
mod9$results %>% glimpse()
re_load_mod6_bayesian <- readr::read_rds("linear_mod6_bayesian_saved.rds")
re_load_mod6_bayesian %>% summary()
re_load_mod9_bayesian <- readr::read_rds("linear_mod9_bayesian_saved.rds")
re_load_mod9_bayesian %>% summary()
all_cv_results <- re_load_mod6_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod6 bayesian") %>%
bind_rows(re_load_mod9_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod9 bayesian"))
re_load_mod6_bayesian$results %>% glimpse ()
re_load_mod6_bayesian %>% glimpse ()
re_load_mod6_bayesian %>% summary ()
View(re_load_mod9_bayesian)
View(re_load_mod9_bayesian)
summary (re_load_mod6_bayesian)
all_cv_results <- re_load_mod6_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod6 bayesian") %>%
bind_rows(re_load_mod9_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod9 bayesian"))
all_cv_results <- re_load_mod6_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod6 bayesian") %>%
bind_rows(re_load_mod9_bayesian %>% collect_metrics(summarize = FALSE) %>%
mutate(wflow_id = "mod9 bayesian"))
all_cv_results
re_load_mod6_bayesian %>% collect_metrics(summarize = TRUE)
re_load_mod9_bayesian %>% collect_metrics(summarize = TRUE)
library(tidyverse)
library(tidymodels)
library(mltools)
library(caret)
df <- readr::read_csv("cs_1675_fall2021_finalproject.csv", col_names = TRUE)
#dft <- df %>% select (-output)
dft <- df %>% mutate (logit=boot::logit(output))
bfm_df <- dft
bf_df <- dft %>% select (-m)
efm_df <- dft %>% mutate (x5=(1-x1+x2+x3+x4), t=v1+v2, w=(x2/(x3+x4)), z=(x1+x2)/(x4+x5))
efm_df %>% glimpse()
ef_df <- efm_df %>% tibble::as_tibble () %>% select (-m)
pred_mod9 <- readr::read_rds("linear_mod9_saved.rds")
efm_df_fitted <- efm_df %>% mutate(fitted=as.vector(pred_mod9$finalModel$fitted.values))
mC_efm_df_fitted <- efm_df_fitted [efm_df_fitted$m == "C",]
mC_efm_df_fitted %>% ggplot(mapping=aes(x=z, y=logit)) +
geom_point() +
geom_line(mapping=aes(x=x1, y=fitted))
efm_df_fitted %>% ggplot(mapping=aes(x=x1*x2, y=logit)) +
geom_point() +
geom_line(mapping=aes(x=x1*x2, y=fitted))
p4_m1 %>% collect_predictions(summarize = FALSE) %>%
roc_curve(Class, .pred_good, event_level="second") %>%
autoplot()
library(tidyverse)
library(tidymodels)
library(mltools)
library(caret)
library(coefplot)
train_test_df <- readr::read_csv("cs_1675_fall2021_finalproject.csv", col_names = TRUE)
indices <- sample (1:nrow(train_test_df), size = 200)
sample_df <- train_test_df %>% slice(indices)
pred_bfm_df <- sample_df
pred_bf_df <- sample_df %>% select (-m)
pred_efm_df <- sample_df %>% mutate (x5=(1-x1+x2+x3+x4), t=v1+v2, w=(x2/(x3+x4)), z=(x1+x2)/(x4+x5))
pred_efm_df %>% glimpse()
pred_ef_df <- pred_efm_df %>% tibble::as_tibble () %>% select (-m)
dft <- train_test_df %>% mutate(output = boot::logit (output))
bfm_df <- dft
bf_df <- dft %>% select (-m)
efm_df <- dft %>% mutate (x5=(1-x1+x2+x3+x4), t=v1+v2, w=(x2/(x3+x4)), z=(x1+x2)/(x4+x5))
efm_df %>% glimpse()
ef_df <- efm_df %>% tibble::as_tibble () %>% select (-m)
classes <- (dft$output < 0.33)
cdf <- dft %>% mutate(Class=ifelse(classes, "good", "bad"))
cdf <- cdf %>% mutate(event=ifelse(classes, 1, 0))
cdf %>% glimpse()
cbfm_df <- bfm_df %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output )
cbf_df <- bf_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output )
cefm_df <- efm_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output )
cef_df <- ef_df  %>% mutate(Class=ifelse(classes, "good", "bad")) %>% select(-output )
p4_m1 <- readr::read_rds("part_4_model_1.rds")
p4_m2 <- readr::read_rds("part_4_model_2.rds")
p4_m3 <- readr::read_rds("part_4_model_3.rds")
p4_m4 <- readr::read_rds("part_4_model_4.rds")
p4_m5 <- readr::read_rds("part_4_model_5.rds")
p4_m6 <- readr::read_rds("part_4_model_6.rds")
#p4_m7 <- readr::read_rds("part_4_model_7.rds")
p4_m8 <- readr::read_rds("part_4_model_8.rds")
p4_m9 <- readr::read_rds("part_4_model_9.rds")
p4_m10 <- readr::read_rds("part_4_model_10.rds")
p4_m11 <- readr::read_rds("part_4_model_11.rds")
library(ROCR)
plot_ROC <- function(model, df)
{
model_prob <- predict(model, df, type = "prob")$good
preds <- prediction(model_prob, df$Class)
print(preds)
model_perf <- preds %>% performance(measure = "tpr", x.measure = "fpr")
# Plot ROC curve
plot(model_perf, col = "black")
abline(a=0, b= 1, lty = 2)
model_perf
}
p4_m1 %>% collect_predictions(summarize = FALSE) %>%
roc_curve(Class, .pred_good, event_level="second") %>%
autoplot()
p4_m1 %>% collect_metrics()
p4_m2 %>% collect_predictions(summarize = FALSE) %>%
roc_curve(Class, .pred_good, event_level="second") %>%
autoplot()
p4_m2 %>% collect_metrics()
p4_m3 %>% collect_predictions(summarize = FALSE) %>%
roc_curve(Class, .pred_good, event_level="second") %>%
autoplot()
p4_m3 %>% collect_metrics()
p4_m4 %>% collect_predictions(summarize = FALSE) %>%
roc_curve(Class, .pred_good, event_level="second") %>%
autoplot()
p4_m4 %>% collect_metrics()
plot_ROC(p4_m5, cefm_df)
p4_m5 %>% collect_metrics()
class (p4_m5)
class (p4_m4)
plot_ROC(p4_m5, cefm_df)
#p4_m5 %>% collect_metrics()
p4_m5_prob <- predict(p4_m5, cefm_df, type = "prob")$good
p4_m5_perf <- prediction(p4_m5_prob, cefm_df$Class)
p4_m5_perf
plot_ROC(p4_m5, cefm_df)
#p4_m5 %>% collect_metrics()
p4_m5_prob <- predict(p4_m5, cefm_df, type = "prob")$good
p4_m5_perf <- prediction(p4_m5_prob, cefm_df$Class)
p4_m5_perf %>% defaultSummary()
library(ROCR)
plot_ROC <- function(model, df)
{
model_prob <- predict(model, df, type = "prob")$good
preds <- prediction(model_prob, df$Class)
#print(preds)
model_perf <- preds %>% performance(measure = "tpr", x.measure = "fpr")
# Plot ROC curve
plot(model_perf, col = "black")
abline(a=0, b= 1, lty = 2)
model_perf
}
plot_ROC(p4_m5, cefm_df)
#p4_m5 %>% collect_metrics()
p4_m5_prob <- predict(p4_m5, cefm_df, type = "prob")$good
#p4_m5_perf <- prediction(p4_m5_prob, cefm_df$Class)
p4_m5_prob %>% defaultSummary()
plot_ROC(p4_m5, cefm_df)
#p4_m5 %>% collect_metrics()
p4_m5_prob <- predict(p4_m5, cefm_df, type = "prob")$good
p4_m5_perf <- prediction(p4_m5_prob, cefm_df$Class)
p4_m5_perf %>% collect_metrics()
plot_ROC(p4_m5, cefm_df)
plot_ROC(p4_m6, cefm_df)
plot_ROC(p4_m8, cefm_df)
plot_ROC(p4_m9, cefm_df)
plot_ROC(p4_m10, cefm_df)
